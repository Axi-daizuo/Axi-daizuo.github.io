// Creates user.posts (instance of HasManyRelation)
User.hasMany(Post, {
  dependent: true,
  foreignKey: 'user_id',
  as: 'posts'
})

// Creates post.user
Post.belongsTo(User, {
  foreignKey: 'user_id',
  as: 'user'
})

// Does something like this...
User.prototype.__defineGetter__('posts', function () {
  return new HasManyRelation({
    model: this,
    from: User,
    to: Post
  })
})

//
RelationModel.prototype.create = function* (data) {
  data[this.foreignKey] = this.model._id
  return yield this.to.create(data)
}

// Include user_id
user.posts.create({
  content: 'blah'
})

user.posts.all().forEach(function (post) {
  return user.posts.detach(post)
})

// Creates user.friends (instance of HasManyRelation)
User.hasAndBelongsToMany(User, {
  foreignKey: 'friend_id',
  as: 'friends'
})
